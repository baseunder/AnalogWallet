	|-------------------------------------------------------------|
	|           This is the BIRTHDAY SPACINGS TEST                |
	|Choose m birthdays in a "year" of n days.  List the spacings |
	|between the birthdays.  Let j be the number of values that   |
	|occur more than once in that list, then j is asymptotically  |
	|Poisson distributed with mean m^3/(4n).  Experience shows n  |
	|must be quite large, say n>=2^18, for comparing the results  |
	|to the Poisson distribution with that mean.  This test uses  |
	|n=2^24 and m=2^10, so that the underlying distribution for j |
	|is taken to be Poisson with lambda=2^30/(2^26)=16. A sample  |
	|of 200 j''s is taken, and a chi-square goodness of fit test  |
	|provides a p value.  The first test uses bits 1-24 (counting |
	|from the left) from integers in the specified file.  Then the|
	|file is closed and reopened, then bits 2-25 of the same inte-|
	|gers are used to provide birthdays, and so on to bits 9-32.  |
	|Each set of bits provides a p-value, and the nine p-values   |
	|provide a sample for a KSTEST.                               |
	|------------------------------------------------------------ |

		RESULTS OF BIRTHDAY SPACINGS TEST FOR 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0
	(no_bdays=1024, no_days/yr=2^24, lambda=16.00, sample size=500)

	Bits used	mean		chisqr		p-value
	 1 to 24	15.64		20.8773		0.231827
	 2 to 25	15.62		14.0142		0.666098
	 3 to 26	15.63		30.5717		0.022505
	 4 to 27	15.81		22.4200		0.169102
	 5 to 28	15.68		19.4567		0.302955
	 6 to 29	15.90		6.7375		0.986700
	 7 to 30	15.94		9.8570		0.909499
	 8 to 31	15.33		27.8100		0.047207
	 9 to 32	15.41		26.4955		0.065893

			degree of freedoms is: 17
	---------------------------------------------------------------
		p-value for KStest on those 9 p-values: 0.103096


	|-------------------------------------------------------------|
	|           THE OVERLAPPING 5-PERMUTATION TEST                |
	|This is the OPERM5 test.  It looks at a sequence of one mill-|
	|ion 32-bit random integers.  Each set of five consecutive    |
	|integers can be in one of 120 states, for the 5! possible or-|
	|derings of five numbers.  Thus the 5th, 6th, 7th,...numbers  |
	|each provide a state. As many thousands of state transitions |
	|are observed,  cumulative counts are made of the number of   |
	|occurences of each state.  Then the quadratic form in the    |
	|weak inverse of the 120x120 covariance matrix yields a test  |
	|equivalent to the likelihood ratio test that the 120 cell    |
	|counts came from the specified (asymptotically) normal dis-  |
	|tribution with the specified 120x120 covariance matrix (with |
	|rank 99).  This version uses 1,000,000 integers, twice.      |
	|-------------------------------------------------------------|

			OPERM5 test for file 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0
		  (For samples of 1,000,000 consecutive 5-tuples)

			  sample 1 
	chisquare=94.067190 with df=99; p-value= 0.621323
	_______________________________________________________________

			  sample 2 
	chisquare=58.894408 with df=99; p-value= 0.999540
	_______________________________________________________________


	|-------------------------------------------------------------|
	|This is the BINARY RANK TEST for 31x31 matrices. The leftmost|
	|31 bits of 31 random integers from the test sequence are used|
	|to form a 31x31 binary matrix over the field {0,1}. The rank |
	|is determined. That rank can be from 0 to 31, but ranks< 28  |
	|are rare, and their counts are pooled with those for rank 28.|
	|Ranks are found for 40,000 such random matrices and a chisqu-|
	|are test is performed on counts for ranks 31,30,28 and <=28. |
	|-------------------------------------------------------------|
		Rank test for binary matrices (31x31) from 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=28	200         	211.4       	0.617       	0.617       
	r=29	5164        	5134.0      	0.175       	0.792       
	r=30	22959       	23103.0     	0.898       	1.690       
	r=31	11677       	11551.5     	1.363       	3.053       

		chi-square = 3.053 with df = 3;  p-value = 0.384
	--------------------------------------------------------------

	|-------------------------------------------------------------|
	|This is the BINARY RANK TEST for 32x32 matrices. A random 32x|
	|32 binary matrix is formed, each row a 32-bit random integer.|
	|The rank is determined. That rank can be from 0 to 32, ranks |
	|less than 29 are rare, and their counts are pooled with those|
	|for rank 29.  Ranks are found for 40,000 such random matrices|
	|and a chisquare test is performed on counts for ranks  32,31,|
	|30 and <=29.                                                 |
	|-------------------------------------------------------------|
		Rank test for binary matrices (32x32) from 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=29	219         	211.4       	0.272       	0.272       
	r=30	5075        	5134.0      	0.678       	0.950       
	r=31	23038       	23103.0     	0.183       	1.133       
	r=32	11668       	11551.5     	1.174       	2.308       

		chi-square = 2.308 with df = 3;  p-value = 0.511
	--------------------------------------------------------------

	|-------------------------------------------------------------|
	|This is the BINARY RANK TEST for 6x8 matrices.  From each of |
	|six random 32-bit integers from the generator under test, a  |
	|specified byte is chosen, and the resulting six bytes form a |
	|6x8 binary matrix whose rank is determined.  That rank can be|
	|from 0 to 6, but ranks 0,1,2,3 are rare; their counts are    |
	|pooled with those for rank 4. Ranks are found for 100,000    |
	|random matrices, and a chi-square test is performed on       |
	|counts for ranks 6,5 and (0,...,4) (pooled together).        |
	|-------------------------------------------------------------|

		Rank test for binary matrices (6x8) from 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

			      bits  1 to  8

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	971         	944.3       	0.755       	0.755       
	r=5	21863       	21743.9     	0.652       	1.407       
	r=6	77166       	77311.8     	0.275       	1.682       

		chi-square = 1.682 with df = 2;  p-value = 0.431
	--------------------------------------------------------------

			      bits  2 to  9

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	932         	944.3       	0.160       	0.160       
	r=5	21771       	21743.9     	0.034       	0.194       
	r=6	77297       	77311.8     	0.003       	0.197       

		chi-square = 0.197 with df = 2;  p-value = 0.906
	--------------------------------------------------------------

			      bits  3 to 10

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	913         	944.3       	1.037       	1.037       
	r=5	21699       	21743.9     	0.093       	1.130       
	r=6	77388       	77311.8     	0.075       	1.205       

		chi-square = 1.205 with df = 2;  p-value = 0.547
	--------------------------------------------------------------

			      bits  4 to 11

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	889         	944.3       	3.238       	3.238       
	r=5	21873       	21743.9     	0.767       	4.005       
	r=6	77238       	77311.8     	0.070       	4.075       

		chi-square = 4.075 with df = 2;  p-value = 0.130
	--------------------------------------------------------------

			      bits  5 to 12

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	934         	944.3       	0.112       	0.112       
	r=5	22123       	21743.9     	6.610       	6.722       
	r=6	76943       	77311.8     	1.759       	8.481       

		chi-square = 8.481 with df = 2;  p-value = 0.014
	--------------------------------------------------------------

			      bits  6 to 13

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	973         	944.3       	0.872       	0.872       
	r=5	21840       	21743.9     	0.425       	1.297       
	r=6	77187       	77311.8     	0.201       	1.498       

		chi-square = 1.498 with df = 2;  p-value = 0.473
	--------------------------------------------------------------

			      bits  7 to 14

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	970         	944.3       	0.699       	0.699       
	r=5	21698       	21743.9     	0.097       	0.796       
	r=6	77332       	77311.8     	0.005       	0.802       

		chi-square = 0.802 with df = 2;  p-value = 0.670
	--------------------------------------------------------------

			      bits  8 to 15

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	934         	944.3       	0.112       	0.112       
	r=5	21617       	21743.9     	0.741       	0.853       
	r=6	77449       	77311.8     	0.243       	1.096       

		chi-square = 1.096 with df = 2;  p-value = 0.578
	--------------------------------------------------------------

			      bits  9 to 16

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	960         	944.3       	0.261       	0.261       
	r=5	21573       	21743.9     	1.343       	1.604       
	r=6	77467       	77311.8     	0.312       	1.916       

		chi-square = 1.916 with df = 2;  p-value = 0.384
	--------------------------------------------------------------

			      bits 10 to 17

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	1008        	944.3       	4.297       	4.297       
	r=5	21586       	21743.9     	1.147       	5.444       
	r=6	77406       	77311.8     	0.115       	5.558       

		chi-square = 5.558 with df = 2;  p-value = 0.062
	--------------------------------------------------------------

			      bits 11 to 18

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	929         	944.3       	0.248       	0.248       
	r=5	21571       	21743.9     	1.375       	1.623       
	r=6	77500       	77311.8     	0.458       	2.081       

		chi-square = 2.081 with df = 2;  p-value = 0.353
	--------------------------------------------------------------

			      bits 12 to 19

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	1009        	944.3       	4.433       	4.433       
	r=5	21700       	21743.9     	0.089       	4.522       
	r=6	77291       	77311.8     	0.006       	4.527       

		chi-square = 4.527 with df = 2;  p-value = 0.104
	--------------------------------------------------------------

			      bits 13 to 20

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	941         	944.3       	0.012       	0.012       
	r=5	21703       	21743.9     	0.077       	0.088       
	r=6	77356       	77311.8     	0.025       	0.114       

		chi-square = 0.114 with df = 2;  p-value = 0.945
	--------------------------------------------------------------

			      bits 14 to 21

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	895         	944.3       	2.574       	2.574       
	r=5	21753       	21743.9     	0.004       	2.578       
	r=6	77352       	77311.8     	0.021       	2.599       

		chi-square = 2.599 with df = 2;  p-value = 0.273
	--------------------------------------------------------------

			      bits 15 to 22

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	942         	944.3       	0.006       	0.006       
	r=5	21720       	21743.9     	0.026       	0.032       
	r=6	77338       	77311.8     	0.009       	0.041       

		chi-square = 0.041 with df = 2;  p-value = 0.980
	--------------------------------------------------------------

			      bits 16 to 23

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	944         	944.3       	0.000       	0.000       
	r=5	21843       	21743.9     	0.452       	0.452       
	r=6	77213       	77311.8     	0.126       	0.578       

		chi-square = 0.578 with df = 2;  p-value = 0.749
	--------------------------------------------------------------

			      bits 17 to 24

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	1005        	944.3       	3.902       	3.902       
	r=5	21862       	21743.9     	0.641       	4.543       
	r=6	77133       	77311.8     	0.414       	4.957       

		chi-square = 4.957 with df = 2;  p-value = 0.084
	--------------------------------------------------------------

			      bits 18 to 25

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	931         	944.3       	0.187       	0.187       
	r=5	21941       	21743.9     	1.787       	1.974       
	r=6	77128       	77311.8     	0.437       	2.411       

		chi-square = 2.411 with df = 2;  p-value = 0.300
	--------------------------------------------------------------

			      bits 19 to 26

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	917         	944.3       	0.789       	0.789       
	r=5	21792       	21743.9     	0.106       	0.896       
	r=6	77291       	77311.8     	0.006       	0.901       

		chi-square = 0.901 with df = 2;  p-value = 0.637
	--------------------------------------------------------------

			      bits 20 to 27

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	907         	944.3       	1.473       	1.473       
	r=5	21618       	21743.9     	0.729       	2.202       
	r=6	77475       	77311.8     	0.345       	2.547       

		chi-square = 2.547 with df = 2;  p-value = 0.280
	--------------------------------------------------------------

			      bits 21 to 28

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	937         	944.3       	0.056       	0.056       
	r=5	21638       	21743.9     	0.516       	0.572       
	r=6	77425       	77311.8     	0.166       	0.738       

		chi-square = 0.738 with df = 2;  p-value = 0.691
	--------------------------------------------------------------

			      bits 22 to 29

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	913         	944.3       	1.037       	1.037       
	r=5	21683       	21743.9     	0.171       	1.208       
	r=6	77404       	77311.8     	0.110       	1.318       

		chi-square = 1.318 with df = 2;  p-value = 0.517
	--------------------------------------------------------------

			      bits 23 to 30

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	921         	944.3       	0.575       	0.575       
	r=5	21833       	21743.9     	0.365       	0.940       
	r=6	77246       	77311.8     	0.056       	0.996       

		chi-square = 0.996 with df = 2;  p-value = 0.608
	--------------------------------------------------------------

			      bits 24 to 31

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	939         	944.3       	0.030       	0.030       
	r=5	21587       	21743.9     	1.132       	1.162       
	r=6	77474       	77311.8     	0.340       	1.502       

		chi-square = 1.502 with df = 2;  p-value = 0.472
	--------------------------------------------------------------

			      bits 25 to 32

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	963         	944.3       	0.370       	0.370       
	r=5	21388       	21743.9     	5.825       	6.196       
	r=6	77649       	77311.8     	1.471       	7.666       

		chi-square = 7.666 with df = 2;  p-value = 0.022
	--------------------------------------------------------------
	    TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
	    These should be 25 uniform [0,1] random variates:
 
	0.431223    	0.906276    	0.547360    	0.130326    	
0.014399     
	0.472730    	0.669778    	0.577980    	0.383697    	
0.062087     
	0.353300    	0.103974    	0.944720    	0.272727    	
0.979831     
	0.749007    	0.083878    	0.299554    	0.637230    	
0.279873     
	0.691443    	0.517368    	0.607739    	0.471846    	
0.021641    
		The KS test for those 25 supposed UNI's yields
			KS p-value = 0.585696

	|-------------------------------------------------------------|
	|                  THE BITSTREAM TEST                         |
	|The file under test is viewed as a stream of bits. Call them |
	|b1,b2,... .  Consider an alphabet with two "letters", 0 and 1|
	|and think of the stream of bits as a succession of 20-letter |
	|"words", overlapping.  Thus the first word is b1b2...b20, the|
	|second is b2b3...b21, and so on.  The bitstream test counts  |
	|the number of missing 20-letter (20-bit) words in a string of|
	|2^21 overlapping 20-letter words.  There are 2^20 possible 20|
	|letter words.  For a truly random string of 2^21+19 bits, the|
	|number of missing words j should be (very close to) normally |
	|distributed with mean 141,909 and sigma 428.  Thus           |
	| (j-141909)/428 should be a standard normal variate (z score)|
	|that leads to a uniform [0,1) p value.  The test is repeated |
	|twenty times.                                                |
	|-------------------------------------------------------------|

		THE OVERLAPPING 20-TUPLES BITSTREAM  TEST for 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0
	 (20 bits/word, 2097152 words 20 bitstreams. No. missing words 
	  should average 141909.33 with sigma=428.00.)
	----------------------------------------------------------------
		   BITSTREAM test results for 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0.

	Bitstream	No. missing words	z-score		p-value
	   1		142567 			 1.54		0.062194
	   2		141651 			-0.60		0.726937
	   3		142448 			 1.26		0.104092
	   4		142842 			 2.18		0.014661
	   5		141869 			-0.09		0.537536
	   6		142367 			 1.07		0.142462
	   7		141857 			-0.12		0.548656
	   8		142320 			 0.96		0.168651
	   9		141668 			-0.56		0.713574
	   10		142388 			 1.12		0.131701
	   11		142035 			 0.29		0.384524
	   12		142572 			 1.55		0.060776
	   13		142434 			 1.23		0.110125
	   14		141886 			-0.05		0.521735
	   15		141575 			-0.78		0.782641
	   16		142337 			 1.00		0.158842
	   17		141291 			-1.44		0.925728
	   18		142608 			 1.63		0.051297
	   19		141371 			-1.26		0.895764
	   20		142129 			 0.51		0.303889
	----------------------------------------------------------------

	|-------------------------------------------------------------|
	|        OPSO means Overlapping-Pairs-Sparse-Occupancy        |
	|The OPSO test considers 2-letter words from an alphabet of   |
	|1024 letters.  Each letter is determined by a specified ten  |
	|bits from a 32-bit integer in the sequence to be tested. OPSO|
	|generates  2^21 (overlapping) 2-letter words  (from 2^21+1   |
	|"keystrokes")  and counts the number of missing words---that |
	|is 2-letter words which do not appear in the entire sequence.|
	|That count should be very close to normally distributed with |
	|mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should|
	|be a standard normal variable. The OPSO test takes 32 bits at|
	|a time from the test file and uses a designated set of ten   |
	|consecutive bits. It then restarts the file for the next de- |
	|signated 10 bits, and so on.                                 |
	|------------------------------------------------------------ |

			   OPSO test for file 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

	Bits used	No. missing words	z-score		p-value
	23 to 32  		142268 		 1.2368		0.108082
	22 to 31  		142161 		 0.8678		0.192744
	21 to 30  		141542 		-1.2667		0.897361
	20 to 29  		141714 		-0.6736		0.749702
	19 to 28  		141445 		-1.6011		0.945327
	18 to 27  		141628 		-0.9701		0.834002
	17 to 26  		141476 		-1.4942		0.932444
	16 to 25  		141858 		-0.1770		0.570246
	15 to 24  		142170 		 0.8989		0.184363
	14 to 23  		141952 		 0.1471		0.441512
	13 to 22  		141896 		-0.0460		0.518331
	12 to 21  		141850 		-0.2046		0.581052
	11 to 20  		142201 		 1.0058		0.157266
	10 to 19  		142085 		 0.6058		0.272337
	9 to 18  		141982 		 0.2506		0.401067
	8 to 17  		141062 		-2.9218		0.998260
	7 to 16  		141707 		-0.6977		0.757314
	6 to 15  		141838 		-0.2460		0.597145
	5 to 14  		142075 		 0.5713		0.283906
	4 to 13  		141588 		-1.1080		0.866077
	3 to 12  		141244 		-2.2942		0.989112
	2 to 11  		141575 		-1.1529		0.875516
	1 to 10  		141658 		-0.8667		0.806934
	-----------------------------------------------------------------

	|------------------------------------------------------------ |
	|    OQSO means Overlapping-Quadruples-Sparse-Occupancy       |
	|  The test OQSO is similar, except that it considers 4-letter|
	|words from an alphabet of 32 letters, each letter determined |
	|by a designated string of 5 consecutive bits from the test   |
	|file, elements of which are assumed 32-bit random integers.  |
	|The mean number of missing words in a sequence of 2^21 four- |
	|letter words,  (2^21+3 "keystrokes"), is again 141909, with  |
	|sigma = 295.  The mean is based on theory; sigma comes from  |
	|extensive simulation.                                        |
	|------------------------------------------------------------ |

			   OQSO test for file 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

	Bits used	No. missing words	z-score		p-value
	28 to 32  		141756 		-0.5198		0.698385
	27 to 31  		141825 		-0.2859		0.612509
	26 to 30  		141699 		-0.7130		0.762072
	25 to 29  		141547 		-1.2282		0.890321
	24 to 28  		142368 		 1.5548		0.059995
	23 to 27  		142114 		 0.6938		0.243905
	22 to 26  		142142 		 0.7887		0.215140
	21 to 25  		141857 		-0.1774		0.570399
	20 to 24  		141826 		-0.2825		0.611210
	19 to 23  		142040 		 0.4429		0.328901
	18 to 22  		142103 		 0.6565		0.255748
	17 to 21  		141777 		-0.4486		0.673131
	16 to 20  		142065 		 0.5277		0.298855
	15 to 19  		142215 		 1.0362		0.150062
	14 to 18  		141961 		 0.1752		0.430480
	13 to 17  		141681 		-0.7740		0.780535
	12 to 16  		142408 		 1.6904		0.045475
	11 to 15  		142138 		 0.7752		0.219125
	10 to 14  		142204 		 0.9989		0.158926
	9 to 13  		141600 		-1.0486		0.852813
	8 to 12  		141993 		 0.2836		0.388348
	7 to 11  		142151 		 0.8192		0.206330
	6 to 10  		142048 		 0.4701		0.319153
	5 to 9  		141734 		-0.5943		0.723857
	4 to 8  		141444 		-1.5774		0.942647
	3 to 7  		142372 		 1.5684		0.058397
	2 to 6  		142128 		 0.7413		0.229270
	1 to 5  		141987 		 0.2633		0.396164
	-----------------------------------------------------------------

	|------------------------------------------------------------ |
	|    The DNA test considers an alphabet of 4 letters: C,G,A,T,|
	|determined by two designated bits in the sequence of random  |
	|integers being tested.  It considers 10-letter words, so that|
	|as in OPSO and OQSO, there are 2^20 possible words, and the  |
	|mean number of missing words from a string of 2^21  (over-   |
	|lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.  |
	|The standard deviation sigma=339 was determined as for OQSO  |
	|by simulation.  (Sigma for OPSO, 290, is the true value (to  |
	|three places), not determined by simulation.                 |
	|------------------------------------------------------------ |

			   DNA test for file 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

	Bits used	No. missing words	z-score		p-value
	31 to 32  		141966 		 0.1672		0.433619
	30 to 31  		142035 		 0.3707		0.355427
	29 to 30  		142017 		 0.3176		0.375390
	28 to 29  		141985 		 0.2232		0.411684
	27 to 28  		142090 		 0.5329		0.297034
	26 to 27  		141691 		-0.6440		0.740226
	25 to 26  		141335 		-1.6942		0.954885
	24 to 25  		141668 		-0.7119		0.761733
	23 to 24  		141451 		-1.3520		0.911813
	22 to 23  		141583 		-0.9626		0.832132
	21 to 22  		141649 		-0.7679		0.778737
	20 to 21  		142170 		 0.7689		0.220965
	19 to 20  		142067 		 0.4651		0.320929
	18 to 19  		141761 		-0.4376		0.669144
	17 to 18  		141699 		-0.6204		0.732517
	16 to 17  		141935 		 0.0757		0.469820
	15 to 16  		141984 		 0.2203		0.412832
	14 to 15  		141904 		-0.0157		0.506272
	13 to 14  		142238 		 0.9695		0.166141
	12 to 13  		141722 		-0.5526		0.709730
	11 to 12  		141897 		-0.0364		0.514507
	10 to 11  		142719 		 2.3884		0.008461
	9 to 10  		142524 		 1.8132		0.034902
	8 to 9  		141777 		-0.3904		0.651863
	7 to 8  		141701 		-0.6145		0.730572
	6 to 7  		141678 		-0.6824		0.752504
	5 to 6  		142230 		 0.9459		0.172092
	4 to 5  		142082 		 0.5094		0.305253
	3 to 4  		141945 		 0.1052		0.458100
	2 to 3  		141472 		-1.2901		0.901485
	1 to 2  		141886 		-0.0688		0.527434
	-----------------------------------------------------------------

	|-------------------------------------------------------------|
	|    This is the COUNT-THE-1''s TEST on a stream of bytes.    |
	|Consider the file under test as a stream of bytes (four per  |
	|32 bit integer).  Each byte can contain from 0 to 8 1''s,    |
	|with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let |
	|the stream of bytes provide a string of overlapping  5-letter|
	|words, each "letter" taking values A,B,C,D,E. The letters are|
	|determined by the number of 1''s in a byte: 0,1,or 2 yield A,|
	|3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus|
	|we have a monkey at a typewriter hitting five keys with vari-|
	|ous probabilities (37,56,70,56,37 over 256).  There are 5^5  |
	|possible 5-letter words, and from a string of 256,000 (over- |
	|lapping) 5-letter words, counts are made on the frequencies  |
	|for each word.   The quadratic form in the weak inverse of   |
	|the covariance matrix of the cell counts provides a chisquare|
	|test: Q5-Q4, the difference of the naive Pearson sums of     |
	|(OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.   |
	|-------------------------------------------------------------|

		Test result for the byte stream from 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0
	  (Degrees of freedom: 5^4-5^3=2500; sample size: 2560000)

			chisquare	z-score		p-value
			2468.22		-0.449		0.673438

	|-------------------------------------------------------------|
	|    This is the COUNT-THE-1''s TEST for specific bytes.      |
	|Consider the file under test as a stream of 32-bit integers. |
	|From each integer, a specific byte is chosen , say the left- |
	|most: bits 1 to 8. Each byte can contain from 0 to 8 1''s,   |
	|with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let  |
	|the specified bytes from successive integers provide a string|
	|of (overlapping) 5-letter words, each "letter" taking values |
	|A,B,C,D,E. The letters are determined  by the number of 1''s,|
	|in that byte: 0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D, |
	|and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter |
	|hitting five keys with with various probabilities: 37,56,70, |
	|56,37 over 256. There are 5^5 possible 5-letter words, and   |
	|from a string of 256,000 (overlapping) 5-letter words, counts|
	|are made on the frequencies for each word. The quadratic form|
	|in the weak inverse of the covariance matrix of the cell     |
	|counts provides a chisquare test: Q5-Q4, the difference of   |
	|the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-  |
	|and 4-letter cell  counts.                                   |
	|-------------------------------------------------------------|

		Test results for specific bytes from 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0
	  (Degrees of freedom: 5^4-5^3=2500; sample size: 256000)

	bits used	chisquare	z-score		p-value
	1 to 8  	2466.74		-0.470		0.680930
	2 to 9  	2494.95		-0.071		0.528469
	3 to 10  	2401.73		-1.390		0.917694
	4 to 11  	2501.06		 0.015		0.493994
	5 to 12  	2611.09		 1.571		0.058084
	6 to 13  	2481.33		-0.264		0.604119
	7 to 14  	2414.48		-1.209		0.886762
	8 to 15  	2468.92		-0.440		0.669860
	9 to 16  	2562.89		 0.889		0.186883
	10 to 17  	2575.58		 1.069		0.142575
	11 to 18  	2440.87		-0.836		0.798477
	12 to 19  	2564.97		 0.919		0.179087
	13 to 20  	2418.95		-1.146		0.874160
	14 to 21  	2613.10		 1.599		0.054856
	15 to 22  	2468.74		-0.442		0.670811
	16 to 23  	2432.37		-0.956		0.830589
	17 to 24  	2492.40		-0.107		0.542775
	18 to 25  	2537.89		 0.536		0.296031
	19 to 26  	2646.85		 2.077		0.018911
	20 to 27  	2532.19		 0.455		0.324491
	21 to 28  	2663.70		 2.315		0.010303
	22 to 29  	2549.29		 0.697		0.242892
	23 to 30  	2447.05		-0.749		0.773012
	24 to 31  	2548.51		 0.686		0.246324
	25 to 32  	2568.90		 0.974		0.164918
	|-------------------------------------------------------------|
	|              THIS IS A PARKING LOT TEST                     |
	|In a square of side 100, randomly "park" a car---a circle of |
	|radius 1.   Then try to park a 2nd, a 3rd, and so on, each   |
	|time parking "by ear".  That is, if an attempt to park a car |
	|causes a crash with one already parked, try again at a new   |
	|random location. (To avoid path problems, consider parking   |
	|helicopters rather than cars.)   Each attempt leads to either|
	|a crash or a success, the latter followed by an increment to |
	|the list of cars already parked. If we plot n: the number of |
	|attempts, versus k: the number successfully parked, we get a |
	|curve that should be similar to those provided by a perfect  |
	|random number generator.  Theory for the behavior of such a  |
	|random curve seems beyond reach, and as graphics displays are|
	|not available for this battery of tests, a simple characteriz|
	|ation of the random experiment is used: k, the number of cars|
	|successfully parked after n=12,000 attempts. Simulation shows|
	|that k should average 3523 with sigma 21.9 and is very close |
	|to normally distributed.  Thus (k-3523)/21.9 should be a st- |
	|andard normal variable, which, converted to a uniform varia- |
	|ble, provides input to a KSTEST based on a sample of 10.     |
	|-------------------------------------------------------------|

		CDPARK: result of 10 tests on file 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0
	  (Of 12000 tries, the average no. of successes should be 
	   3523.0 with sigma=21.9)

	   No. succeses		z-score		p-value
		3475		-2.1918		0.985802
		3551		 1.2785		0.100530
		3511		-0.5479		0.708135
		3558		 1.5982		0.055002
		3528		 0.2283		0.409702
		3514		-0.4110		0.659449
		3478		-2.0548		0.980051
		3502		-0.9589		0.831196
		3541		 0.8219		0.205562
		3526		 0.1370		0.445521
	  Square side=100, avg. no. parked=3518.40 sample std.=26.74
	     p-value of the KSTEST for those 10 p-values: 0.000000


	|-------------------------------------------------------------|
	|              THE MINIMUM DISTANCE TEST                      |
	|It does this 100 times:  choose n=8000 random points in a    |
	|square of side 10000.  Find d, the minimum distance between  |
	|the (n^2-n)/2 pairs of points.  If the points are truly inde-|
	|pendent uniform, then d^2, the square of the minimum distance|
	|should be (very close to) exponentially distributed with mean|
	|.995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and |
	|a KSTEST on the resulting 100 values serves as a test of uni-|
	|formity for random points in the square. Test numbers=0 mod 5|
	|are printed but the KSTEST is based on the full set of 100   |
	|random choices of 8000 points in the 10000x10000 square.     |
	|-------------------------------------------------------------|

		This is the MINIMUM DISTANCE test for file 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

	Sample no.	 d^2		 mean		equiv uni
	   5		0.4886		0.4655		0.388022
	   10		0.4318		0.6356		0.352045
	   15		0.0570		0.8954		0.055682
	   20		1.0882		0.9394		0.665008
	   25		1.6145		1.0335		0.802613
	   30		1.5635		1.0199		0.792228
	   35		0.9394		0.9765		0.610959
	   40		0.8946		0.9792		0.593081
	   45		0.7463		1.0318		0.527634
	   50		0.3530		0.9972		0.298633
	   55		1.8421		1.0456		0.842969
	   60		0.6636		1.0954		0.486704
	   65		0.9470		1.0797		0.613950
	   70		0.0901		1.0261		0.086594
	   75		0.2231		1.0166		0.200840
	   80		0.2030		0.9984		0.184556
	   85		0.4969		0.9866		0.393131
	   90		1.8612		1.0145		0.845962
	   95		0.0713		1.0051		0.069168
	   100		0.1629		0.9855		0.151019
	--------------------------------------------------------------
	Result of KS test on 100 transformed mindist^2's: p-value=0.927814


	|-------------------------------------------------------------|
	|             THE 3DSPHERES TEST                              |
	|Choose  4000 random points in a cube of edge 1000.  At each  |
	|point, center a sphere large enough to reach the next closest|
	|point. Then the volume of the smallest such sphere is (very  |
	|close to) exponentially distributed with mean 120pi/3.  Thus |
	|the radius cubed is exponential with mean 30. (The mean is   |
	|obtained by extensive simulation).  The 3DSPHERES test gener-|
	|ates 4000 such spheres 20 times.  Each min radius cubed leads|
	|to a uniform variable by means of 1-exp(-r^3/30.), then a    |
	| KSTEST is done on the 20 p-values.                          |
	|-------------------------------------------------------------|

		    The 3DSPHERES test for file 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

		sample no	r^3		equiv. uni.
		   1		61.329		0.870527
		   2		5.557		0.169099
		   3		2.634		0.084049
		   4		3.284		0.103689
		   5		6.594		0.197325
		   6		9.448		0.270152
		   7		26.677		0.589025
		   8		4.907		0.150881
		   9		18.932		0.467977
		   10		48.410		0.800846
		   11		43.157		0.762729
		   12		0.608		0.020063
		   13		35.254		0.691227
		   14		3.233		0.102165
		   15		10.195		0.288102
		   16		23.798		0.547629
		   17		49.644		0.808868
		   18		34.401		0.682313
		   19		7.613		0.224133
		   20		8.408		0.244429
	--------------------------------------------------------------
		p-value for KS test on those 20 p-values: 0.186787


	|-------------------------------------------------------------|
	|                 This is the SQUEEZE test                    |
	| Random integers are floated to get uniforms on [0,1). Start-|
	| ing with k=2^31=2147483647, the test finds j, the number of |
	| iterations necessary to reduce k to 1, using the reduction  |
	| k=ceiling(k*U), with U provided by floating integers from   |
	| the file being tested.  Such j''s are found 100,000 times,  |
	| then counts for the number of times j was <=6,7,...,47,>=48 |
	| are used to provide a chi-square test for cell frequencies. |
	|-------------------------------------------------------------|

			RESULTS OF SQUEEZE TEST FOR 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

		    Table of standardized frequency counts
		(obs-exp)^2/exp  for j=(1,..,6), 7,...,47,(48,...)
		-1.5  	 0.1  	 0.6  	 2.1  	 0.8  	 0.6  
		-0.1  	 0.2  	 1.4  	-1.2  	 1.2  	 0.1  
		-0.4  	 1.1  	-1.6  	-1.7  	 0.2  	 0.8  
		 1.5  	 0.9  	-2.3  	 0.0  	 0.4  	 1.1  
		-0.9  	-0.2  	-0.9  	 0.7  	-1.3  	-1.0  
		 0.9  	-0.1  	 0.9  	 0.2  	 1.6  	 1.0  
		-0.2  	 0.2  	 0.1  	 0.4  	-0.6  	 1.0  
		-0.1  
		Chi-square with 42 degrees of freedom:40.988757
		z-score=-0.110336, p-value=0.515263
	_____________________________________________________________


	|-------------------------------------------------------------|
	|            The  OVERLAPPING SUMS test                       |
	|Integers are floated to get a sequence U(1),U(2),... of uni- |
	|form [0,1) variables.  Then overlapping sums,                |
	|  S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.   |
	|The S''s are virtually normal with a certain covariance mat- |
	|rix.  A linear transformation of the S''s converts them to a |
	|sequence of independent standard normals, which are converted|
	|to uniform variables for a KSTEST.                           |
	|-------------------------------------------------------------|

			Results of the OSUM test for 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0

			Test no			p-value
			  1 			0.722251
			  2 			0.879995
			  3 			0.217458
			  4 			0.000776
			  5 			0.210494
			  6 			0.257225
			  7 			0.406494
			  8 			0.602846
			  9 			0.046611
			  10 			0.442104
	_____________________________________________________________

		p-value for 10 kstests on 100 kstests:0.222514

	|-------------------------------------------------------------|
	|    This is the RUNS test.  It counts runs up, and runs down,|
	|in a sequence of uniform [0,1) variables, obtained by float- |
	|ing the 32-bit integers in the specified file. This example  |
	|shows how runs are counted: .123,.357,.789,.425,.224,.416,.95|
	|contains an up-run of length 3, a down-run of length 2 and an|
	|up-run of (at least) 2, depending on the next values.  The   |
	|covariance matrices for the runs-up and runs-down are well   |
	|known, leading to chisquare tests for quadratic forms in the |
	|weak inverses of the covariance matrices.  Runs are counted  |
	|for sequences of length 10,000.  This is done ten times. Then|
	|another three sets of ten.                                   |
	|-------------------------------------------------------------|

			The RUNS test for file 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0
		(Up and down runs in a sequence of 10000 numbers)
				Set 1
		 runs up; ks test for 10 p's: 0.669596
		 runs down; ks test for 10 p's: 0.050258
				Set 2
		 runs up; ks test for 10 p's: 0.539821
		 runs down; ks test for 10 p's: 0.261476

	|-------------------------------------------------------------|
	|This the CRAPS TEST.  It plays 200,000 games of craps, counts|
	|the number of wins and the number of throws necessary to end |
	|each game.  The number of wins should be (very close to) a   |
	|normal with mean 200000p and variance 200000p(1-p), and      |
	|p=244/495.  Throws necessary to complete the game can vary   |
	|from 1 to infinity, but counts for all>21 are lumped with 21.|
	|A chi-square test is made on the no.-of-throws cell counts.  |
	|Each 32-bit integer from the test file provides the value for|
	|the throw of a die, by floating to [0,1), multiplying by 6   |
	|and taking 1 plus the integer part of the result.            |
	|-------------------------------------------------------------|

		RESULTS OF CRAPS TEST FOR 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0 
	No. of wins:  Observed	Expected
	                 98720        98585.858586
		z-score= 0.600, pvalue=0.27427

	Analysis of Throws-per-Game:

	Throws	Observed	Expected	Chisq	 Sum of (O-E)^2/E
	1	66645		66666.7		0.007		0.007
	2	37648		37654.3		0.001		0.008
	3	26901		26954.7		0.107		0.115
	4	19567		19313.5		3.328		3.444
	5	13910		13851.4		0.248		3.691
	6	9919		9943.5		0.061		3.752
	7	7042		7145.0		1.486		5.237
	8	5146		5139.1		0.009		5.247
	9	3666		3699.9		0.310		5.557
	10	2635		2666.3		0.367		5.924
	11	1876		1923.3		1.165		7.089
	12	1432		1388.7		1.348		8.436
	13	1027		1003.7		0.540		8.976
	14	736		726.1		0.134		9.110
	15	484		525.8		3.328		12.439
	16	347		381.2		3.060		15.499
	17	298		276.5		1.665		17.164
	18	200		200.8		0.003		17.168
	19	147		146.0		0.007		17.175
	20	114		106.2		0.571		17.745
	21	260		287.1		2.561		20.306

	Chisq=  20.31 for 20 degrees of freedom, p= 0.43896

		SUMMARY of craptest on 
/Users/maeldistel/Documents/Arduino/AnalogWallet/randomnumbers-diehard/acm0
	 p-value for no. of wins: 0.274267
	 p-value for throws/game: 0.438957
	_____________________________________________________________
